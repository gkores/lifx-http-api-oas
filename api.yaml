openapi: '3.0.0'
info:
  title: LIFX HTTP API
  description: OpenAPI spec for LIFX HTTP API
  version: '1.0'
servers:
  - url: https://api.lifx.com/v1
paths:
  /lights/{selector}:
    get:
      summary: Gets lights belonging to the authenticated account. Filter the lights using selectors.
      operationId: listLights
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'A list of lights, if any, filtered by selector'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLightsResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/{selector}/state:
    put:
      summary: Sets the state of the light within the selector.
      operationId: setState
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody: 
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/SetStateRequestBody'
      responses:
        '200':
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        '202':
          description: 'Accepted, this is returned when fast is true'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/states:
    put:
      summary: Set different states on multiple selectors with a single request
      operationId: setStates
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/SetStatesRequestBody'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStatesResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/{selector}/state/delta:
    post:
      summary: Set new state as delta of current state
      operationId: setStateDelta
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/SetStateDeltaRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/{selector}/toggle:
    post:
      summary: Turn off lights if any of them are on, or turn them on if they are all off. All lights matched by the selector will share the same power state after this action. Physically powered off lights are ignored.
      operationId: togglePower
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/TogglePowerRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/{selector}/breathe:
    post:
      summary: Performs a breathe effect by slowly fading between the given colors. Use the parameters to tweak the effect.
      operationId: breathe
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/BreatheEffectRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []
  /lights/{selector}/pulse:
    post:
      summary: Performs a pulse effect by quickly flashing between the given colors. Use the parameters to tweak the effect.
      operationId: pulse
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/PulseEffectRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - appToken: []
  /lights/{selector}/cycle:
    post:
      summary: Performs a pulse effect by quickly flashing between the given colors. Use the parameters to tweak the effect.
      operationId: cycle
      parameters:
        - name: selector
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/CycleRequestBody'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetStateResponse'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
      - appToken: []
  /scenes:
    get:
      summary: Lists all the scenes available in the users account.
      operationId: listScenes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScenesResponse'
      security:
        - appToken: []
  /scenes/scene_id::{scene_uuid}/activate:
    put:
      summary: Activates a scene from the users account
      operationId: activateScene
      parameters:
        - name: scene_uuid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              $ref: '#/components/schemas/ActivateSceneRequestBody'
      responses:
        200:
          description: 'Success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivateSceneResponse'
        202:
          description: 'Accepted'
        'default':
          description: 'Unexpected error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - appToken: []

components:
  schemas:
    ListLightsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Light'
        warnings:
          $ref: '#/components/schemas/Warning'
    SetStateRequestBody:
      type: object
      properties:
        power:
          type: string
          enum:
            - 'on'
            - 'off'
        color:
          type: string
        brightness:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
        duration:
          type: number
          format: double
          default: 1.0
          minimum: 0.0
          maximum: 3155760000.0
        infrared:
          type: number
          format: double
        fast:
          type: boolean
          default: false
    SetStateResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SetStateResult'
    SetStatesRequestBody:
      type: object
      properties:
        states:
          type: array
          items:
            $ref: '#/components/schemas/SetStateRequestBody'
          maxItems: 50
        defaults:
          $ref: '#/components/schemas/SetStateRequestBody'
        fast:
          type: boolean
      required:
        - states
    SetStatesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
    SetStateDeltaRequestBody:
      type: object
      properties:
        power:
          type: string
          enum:
            - 'on'
            - 'off'
        duration:
          type: number
          format: double
          default: 1.0
          minimum: 0.0
          maximum: 3155760000.0
        infrared:
          type: number
          format: double
        hue:
          type: number
          format: double
        saturation:
          type: number
          format: double
        brightness:
          type: number
          format: double
        kelvin:
          type: number
          format: double
    TogglePowerRequestBody:
      type: object
      properties:
        duration:
          type: number
          format: double
          default: 1.0
          minimum: 0.0
          maximum: 3155760000.0
    BreatheEffectRequestBody:
      type: object
      properties:
        color:
          type: string
        from_color:
          type: string
        period:
          type: number
          format: double
          default: 1.0
        cycles:
          type: number
          format: double
          default: 1.0
        persist:
          type: boolean
          default: false
        power_on:
          type: boolean
          default: true
        peak:
          type: number
          format: double
          default: 0.5
          minimum: 0.0
          maximum: 1.0
      required:
        - color
    PulseEffectRequestBody:
      type: object
      properties:
        color:
          type: string
        from_color:
          type: string
        period:
          type: number
          format: double
          default: 1.0
        cycles:
          type: number
          format: double
          default: 1.0
        persist:
          type: boolean
          default: false
        power_on:
          type: boolean
          default: true
      required:
        - color
    CycleRequestBody:
      type: object
      properties:
        states:
          type: array
          items:
            $ref: '#/components/schemas/SetStateRequestBody'
          minItems: 2
          maxItems: 10
        defaults:
          type: object
        direction:
          type: string
          enum:
            - forward
            - backward
      required:
        - states
    SetStateResult:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        status:
          type: string
    ListScenesResponse:
      type: array
      items:  
        $ref: '#/components/schemas/Scene'
    ActivateSceneRequestBody:
      type: object
      properties:
        duration:
          type: number
          format: double
          default: 1.0
        ignore:
          type: array
          items:
            type: string
        overrides:
          $ref: '#/components/schemas/SetStateRequestBody'
        fast:
          type: boolean
          default: false
    ActivateSceneResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/SetStateResult'

    Light:
      type: object
      properties:
        id: 
          type: string
        uuid:
          type: string
        label:
          type: string
        connected:
          type: boolean
        power:
          type: string
        color:
          $ref: '#/components/schemas/Color'
        infrared:
          type: string
        brightness:
          type: number
        group:
          $ref: '#/components/schemas/Group'
        location:
          $ref: '#/components/schemas/Location'
        last_seen:
          type: string
          format: date-time
        seconds_since_seen:
          type: number
        product:
          $ref: '#/components/schemas/Product'
    Color:
      type: object
      properties:
        hue:
          type: number
        saturation:
          type: number
        kelvin:
          type: integer
    Group:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Location:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Product:
      type: object
      properties:
        name:
          type: string
        company:
          type: string
        identifier:
          type: string
        capabilities:
          $ref: '#/components/schemas/Capabilities'
    Capabilities:
      type: object
      properties:
        has_color:
          type: boolean
        has_variable_color_temp:
          type: boolean
        min_kelvin:
          type: integer
        max_kelvin:
          type: integer
        has_ir:
          type: boolean
        has_multizone:
          type: boolean
    Scene:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
        account:
          type: object
          properties:
            uuid:
              type: string
        states:
          type: array
          items:
            type: object
            properties:
              selector:
                type: string
              power:
                type: string
                enum:
                  - 'on'
                  - 'off'
              brightness:
                type: number
                format: double
                minimum: 0.0
                maximum: 1.0
              color:
                type: object
                properties:
                  hue:
                    type: number
                    format: integer
                    minimum: 0
                    maximum: 360
                  saturation:
                    type: number
                    format: double
                    minimum: 0.0
                    maximum: 1.0
                  kelvin:
                    type: number
                    format: integer
                    minimum: 1500
                    maximum: 9000
        created_at:
          type: number
        updated_at:
          type: number

    Warning:
      type: object
      properties:
        warning:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
  securitySchemes:
    appToken:
      type: http
      scheme: bearer
